/* 
    기본
    display: flex;
    ! 부모 요소는 flex 혹은 inline-flex 로 지정돼야 한다.
    ? flex = 부모 요소가 block 으로 배치돼야 할 때, inline-flex = 부모요소가 inline-block 으로 배치돼야 할 때
    * 그러면 자동으로 이하 자식요소는 모두 flexItem 이 된다.
*/

.flexContainer{
    background-color: #a4a4a4; border-radius: 25px; margin: 10px; padding: 15px;
    display: flex;
}
.flexContainer .flexItem{
    margin: 10px; padding: 20px; color: #fff; background-color: #000; text-align: center;
    border-radius: 25px;
}

.flexContainer.test{
    width: 48%; display: inline-flex; box-sizing: border-box;
}

.flexContainer.direction{
    flex-direction: column-reverse;
    /* 
        flex-direction: (default: row)
        flex-direction 속성은 flexContainer의 주축(main axis) 방향을 설정한다.

        row(ltr), row-reverse(rtl), column(TopToBottom), column(BottomToTop)
    */
}
.flexContainer.wrap{
    flex-wrap: wrap-reverse;
    /* 
        flex-wrap : (default: nowrap)
        flex-wrap 속성은 flxContainer의 width보다 flexItem들의 width 합계가 큰 경우 
        한 줄로 나오게 할것인지 여러줄로 나오게 할 것인지 결정

        nowrap(1행 모두배치. flexItem width 가능한 범위까지 자동축소)
        wrap(width 초과시 개행) - item width 설정시 %, max, min, px 설정 하여 원하는 타이밍 설정 필요
        wrap-reverse(역배치 개행)
    */
}
.flexContainer.wrap .flexItem{
    width: 500px;
}

.flexContainer.flow{
    flex-flow: row-reverse wrap-reverse; background-color: lightgreen;
    /* 
        flex-flow: <flex-direction> | <flex-wrap>;
        direction, wrap을 줄여 쓸 수 있다. (shorthand)
    */
}
.flexContainer.flow .flexItem{
    width: 33.33%; max-width: 500px; min-width: 300px;
}

.flexContainer.justifyContent{
    background-color: lightskyblue;
    justify-content: space-around;
    flex-direction: column;
    /* 
        justify-content (default : xAxis/flex-start)
        flexContainer의 main axis를 기준으로 flexItem을 수평(direction: row) 정렬한다.

        flex-start(flexItem을 좌측 기준 정렬)
        flex-end(flexItem을 우측 기준 정렬)
        center(flexItem을 가운데 기준 정렬)

        space-between(flexItem중 처음은 좌측, 마지막은 우측, 나머지는 중앙 기준 동일 간격)
        space-evenly(여유 공간을 flexItem 사이의 공간 및 시작, 끝선과 flexitem 간의 공간에 모두 균등 배분)
        space-around(양쪽 끝 여유 공간을 두고 flexItem 사이 간격 균일하게 적용. 여유공간은 flexItem 사이 간격/2)
    */
}
.flexContainer.alignContent{
    background-color: orange; flex-wrap: wrap; height: 400px;
    align-content: space-evenly;
    justify-content: space-between;

    /* 
        align-content (default : yAxis/stretch)
        flexContainer의 crossAxis를 기준으로 flexItem을 수직(direction: row) 정렬한다.

        stretch: flexItem을 부모높이 기준으로 늘린다.
        flex-start: flexItem을 부모 높이 기준 위로
        flex-end: flexItem을 부모 높이 기준 아래로
        center: flexItem을 부모 높이 기준 중앙으로

        space-between(flexItem중 처음은 상측, 마지막은 하측, 나머지는 중앙 기준 동일 간격)
        space-evenly(여유 공간을 flexitems 사이의 공간 및 시작, 끝선과 flexitem간의 공간에 모두 균등 배분)
        space-around(양쪽 끝 여유 공간을 두고 flexItem 사이 간격 균일하게 적용. 여유공간은 flexItem 사이 간격/2)
    */
}
.flexContainer.alignContent .flexItem{
    width: 33.33%; max-width: 500px; min-width: 300px;
}
.flexContainer.justifyItems{
    background-color: lightyellow; width: 300px;
    display: grid;
    justify-items: flex-end;
}
.flexContainer.justifyItems:hover{
    justify-items: flex-start;
}
/* 
    justify-items : (default: stretch)
    * flexItems - parentWidth 기준으로 수평방향 정렬
    * justify-items 속성은 모든 flexItem에 적용된다.

    ! space 3형제 사용 불가(부모가 기준이 되어주는 속성이기 때문)
    * flex-start / flex-end / center / stretch
*/

.flexContainer.alignItems{
    align-items: baseline;
    background-color: darkorchid;
}
.flexContainer.alignItems:hover{
    align-items: flex-start;
}
.flexContainer.alignItems .flexItem:first-of-type{
    line-height: 50px;
}
.flexContainer.alignItems .flexItem:nth-of-type(2){
    line-height: 100px;
}
/* 
    align-items : (default: stretch)
    * flexItems - items(H/higher) 기준으로 수직방향 정렬.
    * align-items 속성은 모든 flexitem에 적용된다.

    ! space 3형제 사용 불가(부모가 기준이 되어주는 속성이기 때문)
    * flex-start / flex-end / center / stretch / baseline
*/
.flexContainer.justifySelf{
    width: 300px; display: grid; background-color: violet;
}
.flexContainer.justifySelf .flexItem:first-of-type{
    justify-self: stretch;
}
.flexContainer.justifySelf:hover .flexItem:first-of-type{
    justify-self: center;
}
/* 
    justify-self:
    * 지정된 flexitem에만 justify 적용
    * flex-start / flex-end / center / stretch
*/

.flexContainer.alignSelf{
    background-color: lightcoral;
}
.flexContainer.alignSelf .flexItem:first-of-type{
    align-self: flex-end;
}
.flexContainer.alignSelf:hover .flexItem:first-of-type{
    align-self: center;
}
.flexContainer.alignSelf .flexItem:nth-of-type(2){
    line-height: 100px;
}

.flexContainer.orderItem .flexItem.order1{
    background-color: lightgreen; font-weight: bold; color: green; order: 1;
}
.flexContainer.orderItem .flexItem.order2{
    background-color: lightblue; font-weight: bold; color: blue; order: -1;
}
.flexContainer.orderItem .flexItem.order3{
    background-color: lightsalmon; font-weight: bold; color: red; order: -2;
}
/* 
    order:
    flexContainer의 flexItem을 0(default)을 기본으로 작은 수일수록(음수가능) 먼저 배치한다.
*/

.flexContainer.flexShortHand{
    width: 50%; margin: 0; padding: 0; 
    /* max-width: 300px; */
}
.flexContainer.flexShortHand .flexItem{
    margin: 0; padding: 0;
}

.flexContainer.flexShortHand .flexItem:first-child{
    flex-grow: 2; flex-basis: 0;
}
.flexContainer.flexShortHand .flexItem:first-child~*{
    flex-grow: 1; flex-basis: 0;
}

/* 

    ? flex-grow(팽창(확장)비):
    ! item의 증가비율을 정한다. default: 0. 즉, 빈 공간을 알아서 확장하여 채우지 않는다.
    ! 음수 비허용. 양수 입력 시 '총 증가 내부팽창지수(grow합산)의 너비중 입력된 비율만큼의 너비를 가진다.
    ! 단, max-width가 설정되면 해당 수치를 넘지 않는다.
    * example. item이 3개이고 item들에게 grow가 1이 부여된다면 각각 1/3(33.33%)의 너비를 갖게 된다.
    * 해당 items의 basis값 + (parentrWidth - items의 총basis값) / 총 flex-grow 값 * 각 items의 grow 값

    ?ex.1 > 만약 전체 너비 (300px)의 item 3개에 개별적으로 grow가 부여되었다면?
    todo. .flexItem:first-child{flex-grow:2;} -> 0(basis) + (300/4)*2 = 150.
    todo. .flexItem:first-child~*{flex-grow:1;} -> 0(basis) + (300/4)*1 = 75.

    ? flex-shrink(수축비) :
    ! 기준되는 부모가 줄어들 때 각 item들의 수축비를 정한다. default : 1.
    ! 음수 비허용. 양수 입력시 '총 수축 내부수축지수(shrink합산)의 너비중 입력된 비율만큼 수축될 수 있다.
    ! 단, min-width가 설정되면 해당 수치 이하로 줄어들 수 없다.
    * 해당 items의 basis값 - (parent의 부족한 width / 총 flex-shrink 값) * 각 items의 shrink 값 / basis 미기재는 적용X

    ?ex.2 > 만약 수축중인 부모너비가 300px인 item 3개(각너비는 150px)의 수축비는?
    todo. .flexItem:first-of-type{flex-shrink:2;}-> auto -(150/4)*2= // basis 미기재로 불가능.
    todo. .flexItem:first-of-type{flex-shrink:2;}-> 150(basis) - (150/4)*2=  75.
    todo. .flexItem:first-of-type~*{flex-shrink:1;}-> 150(basis) - (150/4)*1= 112.5.

    basis:
    ! item의 너비를 정한다. 기본값은 auto 이며 다양한 단위 percentages(%) || ems || rems || pixels 를 사용 할 수있다.
    auto : 안의 컨텐츠의 길이만큼 너비가 늘어난다.

    ! 주의
    ? 1. shorthand로 묶어 사용 할 시엔 따로 auto선언을 안할 시 0이 된다.
    ? 2. width와 중복사용 할 경우 basis가 우선이 돼서 중복하여 사용할 필요가 없다.

    * 생략되는 형식
    flex: none;
    flex-grow : 0; flex-shrink: 0; flex-basis: auto; 상태가 됨.

    flex: <flex-grow>
    flex-shrink: 1; flex-basis: 0; 상태가 된다.

    flex: <flex-basis>
    flex-grow: 1; flex-shrink: 1; 상태가 된다.

    flex: <flex-grow> | <flex-shrink>
    flex-basis: 0; 상태가 된다. - 아니..shrink가 작동 하려면 basis가 제한값이 되야 하는데.. 0이라고? = max-width설정이 필요하구나!

    flex: <flex-grow> | <flex-basis>
    flex-shrink: 1; 상태가 된다.

    flex: <flex-grow> | <flex-shrink> | <flex-basis>
    생략한 속성이 없음.

    flex: 0 1 auto; - 확장비는 존재하지 않고(남은공간 자동으로 안채움), 수축만 일어나며 컨텐츠 너비 만큼 너비설정.
    flex: none; - 확장,수축비 모두 존재하지 않음.(남은공간 자동으로 채우지도,줄어들지도 않음). 컨텐츠 너비 만큼 너비설정.
    flex: auto; - 확장,수축비 모두 컨텐츠 개수만큼 비율로 분배되어 갖게되고,  컨텐츠 너비 만큼 너비설정.

    ! 컨텐츠 너비보다 각 너비가 작아지면 전체너비를 넘어가게 됨. -> word-break: break-all.(한글자씩줄바꿈)
*/